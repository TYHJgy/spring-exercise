# 关于配置文件，优先级顺序如下：
# 1.file:./config/
# 2.file:./config/*/
# 3.file:./
# 4.classpath:/config/
# 5.classpath:/
# 备注：
# 1.file表示工程目录
# 2.同一级目录下properties文件优先级高于yml文件

# lazy(延时)初始化：
# 当lazy初始化被启用时，bean将在需要时创建，而不是在应用程序启动时创建。
# 因此，启用延迟初始化可以减少应用程序启动所需的时间。
# 在web应用程序中，启用延迟初始化将导致许多与web相关的bean直到收到HTTP请求后才初始化。
# lazy初始化的一个缺点是，它会延迟应用程序问题的发现。如果延迟初始化一个配置错误的bean，那么在启动期间将不再出现失败，只有在初始化bean时问题才会变得明显。
# 还必须注意确保JVM有足够的内存来容纳应用程序的所有bean，而不仅仅是在启动期间初始化的bean。由于这些原因，默认情况下不启用延迟初始化，建议在启用延迟init之前对JVM堆大小进行微调。
# 可以使用SpringApplicationBuilder上的lazyinitialize方法或SpringApplication上的setlazyinitialize方法通过编程启用延迟初始化。
# 或者，也可以使用spring.main来启用它。延迟初始化属性，如下面的示例所示
spring.main.lazy-initialization=false

name=gy
my.config.name3=gy3
my.config.name3.year=gy3-3
my.config.random=${random.int}
my.config.servers[0]=properties1
my.config.servers[1]=properties2
#server.port=9000
spring.profiles.active=dev2